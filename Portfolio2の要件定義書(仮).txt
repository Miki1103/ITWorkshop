・サービス名
簿記試験攻略ゲーム

・5W1H
who 就労移行支援事業所の利用者の方
(簿記試験を受ける事を検討している方)

what 簿記試験勉強を楽しく学ぶゲーム

when 12月24日リリース

where ？

why 職業訓練校で取得可能である簿記試験の勉強の
　　お手伝いになるようなアプリを作りたいから。

how 環境はJava、サーブレットJSP、HTML、CSS、H2データベース
　　どのように作成するかは下記に記載。

・概要
簿記試験の勉強を楽しく行えるゲームです。
出題方式は選択問題です。実際の試験に沿った形でゲームを行うことが出来ます。
ゲームの内容は味方キャラと敵キャラがいてそれぞれライフ(HP)を持っています。
もし、問題を間違えると味方HPは減り、問題に正解すると敵HPが減ります。
味方のHPがなくなればゲームオーバー、敵のHPがなくなればゲームクリアになります。
スコアが画面に表示されるので満点になるまで何回でも繰り返し勉強ができます。

・開発の背景
株式会社ジョブリッチの就労移行支援事業所と、就労継続支援A型事業所の
[強み、特徴]である職業訓練校で取得可能な資格として簿記が上げられており、
利用者の方のスキルアップにつながるお手伝いができる制作物を作りたいと
感じたため。

・機能要件

①画面設計

画面遷移図作成済み
(簡易的なものなので、書き込み必要な場合はその都度書き込む)

②機能設計

ER図を今後作成予定
(テーブル設計完了してから取り掛かる)
余力があればJavaのクラス図作成

③データ設計
データフローを今後作成予定

・制作物のこだわったポイントの記入
・今後の改善点

の二点も要件定義書に書き加えてGitHabに記載予定。

---------------------------------------------------------

★ログイン

・index.jsp(webapp直下) 
ログイン画面
機能としては新規登録とユーザー入力画面
ボタン「ゲームの説明」を作成　
もしくは文章で簡単に説明

・UserDAO.java(daoパッケージ)
ユーザー情報のデータベース操作を行う

メソッド
createUser(User user): 新規ユーザーを登録する。
findUserByUsername(String username): ユーザー名でユーザー情報を取得する。
updatePassword(String username, String newPasswordHash): 
パスワードの更新（必要に応じて）。

・User.java(modelパッケージ)　
ユーザーに関する情報を持つJavaBeans
ユーザーの情報を保持するデータ構造として使用。
UserDAOは、このクラスを使ってデータをやり取りする。

・UserAuthenticator.java(modelパッケージ)
パスワードのハッシュ化
入力された情報の一致確認
DAOを使用して、データベースからユーザー情報を取得し、認証。

・LoginSuccess.jsp(viewパッケージ)
ログイン成功画面
ボタン「ゲームの概要」を作成

・AccountCreated.jsp(viewパッケージ)
新規登録完了画面
ボタン「ゲームの概要」を作成

・Account.jsp(viewパッケージ)
新規登録(ユーザー名とパスワード入力)
ボタン「確定」を作成

・LoginError.jsp(viewパッケージ)
ログイン失敗画面
ボタン「トップ画面に戻る」を作成

・Login.java(servlretパッケージ)
UserAuthenticator を利用して認証し、結果に応じて画面を遷移させる。
(成功→ゲームの概要)
(失敗→トップ画面に戻る) 

--------------------------------------------------

★ゲームの概要説明

・GameInfo.jsp(viewパッケージ)
ゲームの概要説明
キャラの説明とどのようにゲームが進行するかなど
ボタン「ゲームスタート」を作成

--------------------------------------------------

★問題回答

・QuestionDAO.java(daoパッケージ)
問題データをデータベースから取得・保守するクラス。
プロパティ
①id:問題のid 
②text:問題文　　
③choices:選択肢 
④correct_answer:正解

メソッド
getQuestionById(int id): 指定されたIDの問題を取得。
getAllQuestions(): すべての問題を取得。
必要に応じて addQuestion(Question question) で新しい問題を追加可能。
is_corrent(answer):回答が正しいかどうか判定。

・Question.java(modelパッケージ)
Questionテーブルのレコードを表すクラス。
 
・CharacterDAO.java(daoパッケージ)
キャラクター情報（HPや名前など）を管理するクラス。
プロパティ
①id:問題のid 
②name:キャラクター名 
③max_hp:最大HP 　
④hp:現在のhp

メソッド
getCharacterById(int id): 指定されたIDのキャラクターを取得。
updateCharacter(Character character): キャラクターの状態を更新（例: HP変更）。
必要に応じて addCharacter(Character character) で新しいキャラクターを追加可能。
reduce_hp(amount):HPを減少
is_alive():キャラクターが生存しているか確認。

・Character.java(modelパッケージ)
Characterテーブルのレコードを表すクラス。

・GameDAO.java(daoパッケージ)
ゲームの進行状態やスコアを保存・取得するクラス。
プロパティ
①id:問題のid 
②player_character: プレイヤーのキャラクター（Characterインスタンス）
③enemy_character: 敵のキャラクター（Characterインスタンス）
④current_question: 現在の問題（Questionインスタンス）

メソッド
saveGameStatus(Game game): ゲームの進行状態を保存。
getGameById(int id): 指定されたゲームの状態を取得。
saveGameResult(int gameId, int score, boolean isClear): ゲーム結果を保存。
next_question(): 次の問題を取得。
check_answer(answer): 答えを確認し、HPを調整。
is_game_over(): ゲーム終了条件を確認。

・Game.java(modelパッケージ)
Gameテーブルのレコードを表すクラス。

・QuestionView.jsp(viewパッケージ)
問題文や選択肢を表しする画面。
プレイヤーと敵のHPを表示する画面。

・GameOverView.jsp(viewパッケージ)
ゲームオーバー時の画面。スコアも一緒に出す。

・GameCleaView.jsp(viewパッケージ)
・ゲームクリア時の画面。スコアも一緒に出す。

・GameController.java(servletパッケージ)
ユーザーの入力を受け取り、ゲームの進行を制御。

メソッド
handle_answer(answer): 回答を受け取り、モデルを更新。
update_view(): 現在のゲーム状態に基づいてビューを更新。

---------------------------------------------------

★キャラの状態によって画像を変えるクラス

・CharacterImageManager.java (modelパッケージ)
キャラクターの状態(HPの割合)を判定し、それぞれに応じた画像パスを返す。
プロパティ
character: キャラクターインスタンス（Characterクラス）

メソッド
get_image_path(): キャラクターの状態に応じた画像パスを返す。

・GameController.java（controllerパッケージ）
GameControllerクラスで、キャラクターインスタンスをビューに渡す部分を追加。

-----------------------------------------------------

★テーブル設計

Users - ユーザー情報の管理。
Questions - 問題データの管理。
Characters - キャラクター情報の管理。
GameStatus - ゲーム進行状態の管理。
GameHistory - ユーザーごとのゲーム履歴を記録。

この5つのテーブルが必要

◎Usersテーブル
id	INT (PK)	ユーザーID（主キー、自動増分）
username	VARCHAR(50)	ユーザー名（ユニーク制約）
password_hash	VARCHAR(255)	パスワードのハッシュ値
created_at	TIMESTAMP	アカウント作成日時
updated_at	TIMESTAMP	最終更新日時



◎Questionsテーブル
id	INT (PK)	問題ID（主キー、自動増分）
text	TEXT	　　　　問題文
choices	TEXT	　　　　選択肢（JSON形式で保存）
correct_answer	VARCHAR(255)	正解




◎Characters テーブル
id	INT (PK)	キャラクターID（主キー、自動増分）
name	VARCHAR(50)	キャラクター名
max_hp	INT	最大HP
hp	INT	現在のHP
user_id	INT (FK)	ユーザーID（Usersテーブルの外部キー）




◎GameStatus テーブル
id	INT (PK)	ゲームステータスID（主キー、自動増分）
user_id	INT (FK)	ユーザーID（Usersテーブルの外部キー）
current_question_id	INT (FK)	現在の問題ID（Questionsテーブルの外部キー）
player_character_id	INT (FK)	プレイヤーキャラクターID（Charactersテーブルの外部キー）
enemy_character_id	INT (FK)	敵キャラクターID（Charactersテーブルの外部キー）
created_at	TIMESTAMP	ゲーム開始日時




◎GameHistory テーブル
id	INT (PK)	履歴ID（主キー、自動増分）
user_id	INT (FK)	ユーザーID（Usersテーブルの外部キー）
score	INT	最終スコア
result	VARCHAR(50)	結果（例: "Win", "Lose"）
completed_at	TIMESTAMP	ゲーム終了日時